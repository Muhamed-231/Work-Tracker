import React, { useState, useEffect } from 'react';

// Main application component
const App = () => {
    // State for managing days, current month, and modal-related data
    const [days, setDays] = useState([]);
    const [currentMonth, setCurrentMonth] = useState(new Date());
    const [notes, setNotes] = useState('');
    const [fromTime, setFromTime] = useState('');
    const [toTime, setToTime] = useState('');
    const [selectedDay, setSelectedDay] = useState(null);
    const [modalStatus, setModalStatus] = useState('');
    const [showModal, setShowModal] = useState(false);

    // Effect to generate calendar days when the current month changes
    useEffect(() => {
        generateDays(currentMonth);
    }, [currentMonth]);

    // Function to generate the days for the calendar grid
    const generateDays = (date) => {
        const year = date.getFullYear();
        const month = date.getMonth();
        const firstDayOfMonth = new Date(year, month, 1);
        const lastDayOfMonth = new Date(year, month + 1, 0);
        const daysInMonth = lastDayOfMonth.getDate();
        const startDay = firstDayOfMonth.getDay();

        const monthDays = [];
        // Add empty placeholders for days before the start of the month
        for (let i = 0; i < startDay; i++) {
            monthDays.push({ date: null, status: 'empty' });
        }
        // Add actual days of the month with default values
        for (let i = 1; i <= daysInMonth; i++) {
            monthDays.push({
                date: new Date(year, month, i),
                status: 'work',
                notes: '',
                fromTime: '',
                toTime: ''
            });
        }
        setDays(monthDays);
    };

    // Handlers for navigating to the previous and next months
    const handlePrevMonth = () => {
        setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));
    };

    const handleNextMonth = () => {
        setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));
    };

    // Handler for clicking on a day to open the modal and populate its state
    const handleDayClick = (index) => {
        const day = days[index];
        if (day.date) {
            setSelectedDay(index);
            setNotes(day.notes || '');
            setFromTime(day.fromTime || '');
            setToTime(day.toTime || '');
            setModalStatus(day.status);
            setShowModal(true);
        }
    };

    // Handler for closing the modal and resetting its state
    const handleCloseModal = () => {
        setShowModal(false);
        setSelectedDay(null);
        setNotes('');
        setFromTime('');
        setToTime('');
        setModalStatus('');
    };

    // Handler for saving all changes made in the modal for a selected day
    const handleSave = () => {
        if (selectedDay !== null) {
            const updatedDays = [...days];
            const dayToUpdate = updatedDays[selectedDay];
            
            dayToUpdate.notes = notes;
            dayToUpdate.status = modalStatus;

            // Save time only if status is 'extra' or 'permission', otherwise clear it
            if (modalStatus === 'extra' || modalStatus === 'permission') {
                dayToUpdate.fromTime = fromTime;
                dayToUpdate.toTime = toTime;
            } else {
                dayToUpdate.fromTime = '';
                dayToUpdate.toTime = '';
            }
            
            setDays(updatedDays);
            handleCloseModal();
        }
    };

    // Calculate summary counts for different day statuses
    const permissionDays = days.filter(day => day.status === 'permission').length;
    const workDays = days.filter(day => day.status === 'work' || day.status === 'extra' || day.status === 'permission').length;
    const offDays = days.filter(day => day.status === 'off').length;
    const extraDays = days.filter(day => day.status === 'extra').length;

    // Helper to get the appropriate background color class based on day status
    const getStatusColor = (status) => {
        switch (status) {
            case 'off': return 'bg-red-200';
            case 'extra': return 'bg-green-200';
            case 'permission': return 'bg-yellow-200';
            case 'work': return 'bg-white';
            default: return 'bg-transparent';
        }
    };

    // Helper function to calculate the duration between two times in Hour:min format
    const calculateHours = (from, to) => {
        if (!from || !to) return null;

        const fromDate = new Date(`1970-01-01T${from}:00`);
        const toDate = new Date(`1970-01-01T${to}:00`);

        if (isNaN(fromDate) || isNaN(toDate)) return null;

        let diff = toDate.getTime() - fromDate.getTime();
        if (diff < 0) { // Handles overnight case, e.g., 22:00 to 02:00
            diff += 24 * 60 * 60 * 1000;
        }

        const totalMinutes = Math.floor(diff / (1000 * 60));
        const hours = Math.floor(totalMinutes / 60);
        const minutes = totalMinutes % 60;
        
        // Pad minutes with a leading zero if needed
        const paddedMinutes = minutes < 10 ? `0${minutes}` : minutes;

        return `${hours}:${paddedMinutes}`;
    };

    // Handler for downloading the monthly report as a CSV file
    const handleDownloadReport = () => {
        const monthName = currentMonth.toLocaleString('default', { month: 'long' });
        const year = currentMonth.getFullYear();

        // CSV Header
        let csvContent = "Date,Status,From,To,Notes\n";

        // Add each day's data to the CSV content
        days.forEach(day => {
            if (day.date) {
                const dateStr = day.date.toLocaleDateString();
                const status = day.status;
                const from = day.fromTime || '';
                const to = day.toTime || '';
                // Escape commas in notes by wrapping the notes in double quotes
                const notes = `"${day.notes.replace(/"/g, '""')}"`;
                csvContent += `${dateStr},${status},${from},${to},${notes}\n`;
            }
        });
        
        // Add summary to the end of the CSV
        csvContent += "\n";
        csvContent += "Monthly Summary\n";
        csvContent += `Work Days,${workDays}\n`;
        csvContent += `Off Days,${offDays}\n`;
        csvContent += `Extra Days,${extraDays}\n`;
        csvContent += `Permission Days,${permissionDays}\n`;


        // Create a Blob and trigger the download
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement("a");
        if (link.download !== undefined) {
            const url = URL.createObjectURL(blob);
            link.setAttribute("href", url);
            link.setAttribute("download", `Time_Report_${monthName}_${year}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    };


    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-100 via-purple-100 to-pink-100 p-4 sm:p-6 lg:p-8 font-sans">
            <div className="max-w-5xl mx-auto bg-white/70 backdrop-blur-lg rounded-xl shadow-lg p-6">
                <h1 className="text-3xl font-bold text-center text-gray-800 mb-6">Monthly Time Tracker</h1>

                {/* Header with month navigation */}
                <div className="flex justify-between items-center mb-4">
                    <button onClick={handlePrevMonth} className="px-4 py-2 bg-white/80 text-gray-700 rounded-lg hover:bg-white transition-colors shadow-sm">Previous</button>
                    <h2 className="text-2xl font-semibold text-gray-700">{currentMonth.toLocaleString('default', { month: 'long', year: 'numeric' })}</h2>
                    <button onClick={handleNextMonth} className="px-4 py-2 bg-white/80 text-gray-700 rounded-lg hover:bg-white transition-colors shadow-sm">Next</button>
                </div>

                {/* Calendar grid */}
                <div className="grid grid-cols-7 gap-2 text-center">
                    {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
                        <div key={day} className="font-semibold text-gray-600 p-2">{day}</div>
                    ))}
                    {days.map((day, index) => (
                        <div
                            key={index}
                            onClick={() => handleDayClick(index)}
                            className={`p-2 h-28 rounded-lg cursor-pointer transition-all duration-300 flex flex-col ${getStatusColor(day.status)} ${day.date ? 'hover:shadow-md hover:scale-105' : ''} ${selectedDay === index ? 'ring-2 ring-blue-500' : ''}`}
                        >
                            {day.date && (
                                <>
                                    <div className="font-bold">{day.date.getDate()}</div>
                                    <div className="text-xs mt-1 capitalize text-gray-500">{day.status}</div>
                                    
                                    {/* Show calculated hours for EXTRA days */}
                                    {day.status === 'extra' && day.fromTime && day.toTime && (
                                        <div className="text-xs mt-1 font-semibold text-green-800 bg-green-100/80 rounded-full px-2 py-0.5 self-center">
                                            {calculateHours(day.fromTime, day.toTime)}
                                        </div>
                                    )}

                                    {/* Show calculated hours for PERMISSION days */}
                                    {day.status === 'permission' && day.fromTime && day.toTime && (
                                        <div className="text-xs mt-1 font-semibold text-yellow-800 bg-yellow-100/80 rounded-full px-2 py-0.5 self-center">
                                            {calculateHours(day.fromTime, day.toTime)}
                                        </div>
                                    )}

                                    {day.notes && <div className="mt-auto text-left text-xs text-blue-500 truncate pt-1">📝 {day.notes}</div>}
                                </>
                            )}
                        </div>
                    ))}
                </div>

                {/* Summary section */}
                <div className="mt-8 pt-6 border-t border-gray-200">
                    <div className="flex justify-between items-center mb-4">
                         <h3 className="text-xl font-semibold text-gray-800">Monthly Summary</h3>
                         <button onClick={handleDownloadReport} className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition-colors shadow-md">Download Report</button>
                    </div>
                    <div className="flex justify-around flex-wrap gap-4">
                        <div className="text-center p-4 bg-blue-100/70 rounded-lg shadow-sm w-full sm:w-auto flex-1">
                            <p className="text-2xl font-bold text-blue-800">{workDays}</p>
                            <p className="text-gray-600">Work Days</p>
                        </div>
                        <div className="text-center p-4 bg-red-100/70 rounded-lg shadow-sm w-full sm:w-auto flex-1">
                            <p className="text-2xl font-bold text-red-800">{offDays}</p>
                            <p className="text-gray-600">Off Days</p>
                        </div>
                        <div className="text-center p-4 bg-green-100/70 rounded-lg shadow-sm w-full sm:w-auto flex-1">
                            <p className="text-2xl font-bold text-green-800">{extraDays}</p>
                            <p className="text-gray-600">Extra Days</p>
                        </div>
                         <div className="text-center p-4 bg-yellow-100/70 rounded-lg shadow-sm w-full sm:w-auto flex-1">
                            <p className="text-2xl font-bold text-yellow-800">{permissionDays}</p>
                            <p className="text-gray-600">Permissions</p>
                        </div>
                    </div>
                </div>
            </div>

            {/* Edit Day Modal */}
            {showModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50">
                    <div className="bg-white rounded-xl p-8 shadow-2xl w-full max-w-md m-4">
                        <h3 className="text-2xl font-bold mb-4 text-gray-800">
                            Edit Day: {selectedDay !== null && days[selectedDay].date.toLocaleDateString()}
                        </h3>
                        
                        <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
                            <div className="flex justify-between items-center rounded-lg overflow-hidden">
                                <button onClick={() => setModalStatus('work')} className={`flex-1 py-2 text-white transition-colors ${modalStatus === 'work' ? 'bg-blue-600' : 'bg-blue-400 hover:bg-blue-500'}`}>Work</button>
                                <button onClick={() => setModalStatus('off')} className={`flex-1 py-2 text-white transition-colors ${modalStatus === 'off' ? 'bg-red-600' : 'bg-red-400 hover:bg-red-500'}`}>Off</button>
                                <button onClick={() => setModalStatus('extra')} className={`flex-1 py-2 text-white transition-colors ${modalStatus === 'extra' ? 'bg-green-600' : 'bg-green-400 hover:bg-green-500'}`}>Extra</button>
                                <button onClick={() => setModalStatus('permission')} className={`flex-1 py-2 text-white transition-colors ${modalStatus === 'permission' ? 'bg-yellow-500' : 'bg-yellow-400 hover:bg-yellow-500'}`}>Permission</button>
                            </div>
                        </div>

                        {(modalStatus === 'extra' || modalStatus === 'permission') && (
                            <div className="flex justify-between gap-4 mb-4">
                                <div className="w-1/2">
                                    <label className="block text-sm font-medium text-gray-700">From</label>
                                    <input type="time" value={fromTime} onChange={(e) => setFromTime(e.target.value)} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" />
                                </div>
                                <div className="w-1/2">
                                    <label className="block text-sm font-medium text-gray-700">To</label>
                                    <input type="time" value={toTime} onChange={(e) => setToTime(e.target.value)} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" />
                                </div>
                            </div>
                        )}

                        <div>
                            <label className="block text-sm font-medium text-gray-700">Notes</label>
                            <textarea
                                value={notes}
                                onChange={(e) => setNotes(e.target.value)}
                                className="w-full h-24 mt-1 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
                                placeholder="Add your notes here..."
                            />
                        </div>

                        <div className="flex justify-end gap-4 mt-6">
                            <button onClick={handleCloseModal} className="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300">Cancel</button>
                            <button onClick={handleSave} className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Save</button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default App;
